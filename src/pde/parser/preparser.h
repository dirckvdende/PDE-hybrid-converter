
#pragma once

#include "presystem.h"
#include "treeparser/parser.h"
#include <vector>
#include <string>

namespace pde::parser {

/**
 * Runs the tree parser and and expression parser to generate lists of
 * expressions per PDE configuration entry
 */
class PreParser {

public:

    /**
     * Constructor
     */
    PreParser();

    /**
     * Destructor
     */
    ~PreParser();

    /**
     * Set the input text for the PDE preparser
     * @param val The input text
     */
    void setText(const std::string &val);

    /**
     * Run the preparser
     */
    void run();

    /**
     * Retrieve the presystem, generated by run()
     * @return A reference to the presystem
     */
    PreSystem &getSystem();

private:

    /**
     * Run the tree parser
     */
    void runTreeParser();

    /**
     * Run expression parser to parse fields produced by runTreeParser()
     */
    void runExprParser();

    /**
     * Check if all required fields are given in the preConfig. Throws an error
     * if this is not the case. Also checks if configurations have the correct
     * lengths
     */
    void checkRequiredFields() const;

    /**
     * Parse dimensions configuration settings. The result is output to the PDE
     * system
     * @param txt The text to parse
     */
    void parseDims(const std::string &txt);

    /**
     * Parse an emit statement. The result is output to the PDE system
     * @param txt The text to parse
     */
    void parseEmit(const std::string &txt);

    /**
     * Parse a single expression
     * @param txt The text to parse
     * @return The parsed expression node
     */
    expr::ExprNode parseExpr(const std::string &txt) const;

    /**
     * Parse a number list
     * @param txt The text to parse
     * @return A list of doubles, which is the parsed version of the text
     */
    std::vector<double> parseNumList(const std::string &txt) const;

    // Input text
    std::string txt;
    // The preparsed PDE system output
    PreSystem preSystem;
    // Tree parser to convert raw text to text field list
    treeparser::Parser treeParser;
    // PDE specification as a map: maps a name to a vector of values
    std::unordered_map<std::string, std::vector<std::string>> preConfig;

};

}